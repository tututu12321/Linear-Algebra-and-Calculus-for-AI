import numpy as np
import pandas as pd
from sklearn.decomposition import TruncatedSVD
import matplotlib.pyplot as plt

# Step 1: Create a Ratings Matrix (Users x Items)
ratings_data = {
    "Product A": [5, 4, np.nan, 3, np.nan],
    "Product B": [3, np.nan, 4, 5, 2],
    "Product C": [np.nan, 2, 5, np.nan, 4],
    "Product D": [4, 5, np.nan, 4, 3],
    "Product E": [np.nan, 3, 2, np.nan, 5],
}
ratings_matrix = pd.DataFrame(ratings_data, index=["User 1", "User 2", "User 3", "User 4", "User 5"])
print("Original Ratings Matrix:\n", ratings_matrix)

# Step 2: Fill Missing Values (Imputation using Mean)
ratings_filled = ratings_matrix.apply(lambda col: col.fillna(col.mean()), axis=0)
print("\nRatings Matrix with Imputed Values:\n", ratings_filled)

# Step 3: Perform Matrix Factorization (SVD)
svd = TruncatedSVD(n_components=2)  # Reduce to 2 latent factors
user_factors = svd.fit_transform(ratings_filled)  # U matrix
item_factors = svd.components_  # V^T matrix

# Step 4: Predict Ratings
predicted_ratings = np.dot(user_factors, item_factors)
predicted_ratings_df = pd.DataFrame(predicted_ratings, index=ratings_matrix.index, columns=ratings_matrix.columns)
print("\nPredicted Ratings Matrix:\n", predicted_ratings_df)

# Step 5: Compare Original and Predicted Ratings
def visualize_ratings(original, predicted, title1, title2):
    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.imshow(original, cmap="coolwarm", interpolation="nearest", aspect="auto")
    plt.title(title1)
    plt.colorbar(label="Rating")
    plt.xticks(range(len(original.columns)), original.columns, rotation=45)
    plt.yticks(range(len(original.index)), original.index)

    plt.subplot(1, 2, 2)
    plt.imshow(predicted, cmap="coolwarm", interpolation="nearest", aspect="auto")
    plt.title(title2)
    plt.colorbar(label="Rating")
    plt.xticks(range(len(predicted.columns)), predicted.columns, rotation=45)
    plt.yticks(range(len(predicted.index)), predicted.index)

    plt.tight_layout()
    plt.show()

visualize_ratings(
    ratings_matrix.fillna(0),  # Replace NaN with 0 for visualization
    predicted_ratings_df,
    "Original Ratings Matrix (With Missing Values)",
    "Predicted Ratings Matrix (Collaborative Filtering)",
)
